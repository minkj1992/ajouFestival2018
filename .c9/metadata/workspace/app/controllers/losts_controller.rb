{"changed":false,"filter":false,"title":"losts_controller.rb","tooltip":"/app/controllers/losts_controller.rb","value":"class LostsController < ApplicationController\n  before_action :set_lost, only: [:show, :edit, :update, :destroy]\n\n  # GET /losts\n  # GET /losts.json\n  def index\n    @q = Lost.ransack(params[:q])\n    @lost = @q.result.paginate(page: params[:page])\n    # @lost = Lost.all.paginate(:page => params[:page], :per_page => 5)\n  end\n  \n  # GET /losts/1\n  # GET /losts/1.json\n  def show\n  end\n\n  # GET /losts/new\n  def new\n    @lost = Lost.new\n  end\n\n  # GET /losts/1/edit\n  def edit\n  end\n\n  # POST /losts\n  # POST /losts.json\n  def create\n    @lost = Lost.new(lost_params)\n\n    respond_to do |format|\n      if @lost.save\n        format.html { redirect_to @lost, notice: 'Lost was successfully created.' }\n        format.json { render :show, status: :created, location: @lost }\n      else\n        format.html { render :new }\n        format.json { render json: @lost.errors, status: :unprocessable_entity }\n      end\n    end\n  end\n\n  # PATCH/PUT /losts/1\n  # PATCH/PUT /losts/1.json\n  def update\n    respond_to do |format|\n      if @lost.update(lost_params)\n        format.html { redirect_to @lost, notice: 'Lost was successfully updated.' }\n        format.json { render :show, status: :ok, location: @lost }\n      else\n        format.html { render :edit }\n        format.json { render json: @lost.errors, status: :unprocessable_entity }\n      end\n    end\n  end\n\n  # DELETE /losts/1\n  # DELETE /losts/1.json\n  def destroy\n    @lost.destroy\n    respond_to do |format|\n      format.html { redirect_to losts_url, notice: 'Lost was successfully destroyed.' }\n      format.json { head :no_content }\n    end\n  end\n\n  private\n    # Use callbacks to share common setup or constraints between actions.\n    def set_lost\n      @lost = Lost.find(params[:id])\n    end\n\n    # Never trust parameters from the scary internet, only allow the white list through.\n    def lost_params\n      params.require(:lost).permit(:item, :place, :number, :lost)\n    end\nend\n","undoManager":{"mark":-1,"position":-1,"stack":[]},"ace":{"folds":[],"scrolltop":0,"scrollleft":0,"selection":{"start":{"row":1,"column":2},"end":{"row":1,"column":25},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":0},"timestamp":1526824595953}